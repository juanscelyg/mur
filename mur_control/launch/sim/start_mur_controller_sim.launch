<launch>
    <!-- If you want to generate a ROS bag with the recorded simulated data, set this flag to true -->
    <arg name="record" default="false"/>
    <arg name="bag_name" default="default"/> <!--bag_name:=$(date +'%d-%m-%Y_%Hh%Mm%S')-->

    <!-- Start the a underwater world simulation scenario -->
    <include file="$(find grmi_worlds)/launch/GRMI_pool_world.launch"/>
    <!--include file="$(find uuv_gazebo_worlds)/launch/ocean_waves.launch"/-->
    <!--include file="$(find grmi_worlds)/launch/GRMI_empty_world_ekf.launch"/-->

    <!-- Add the MUR vehicle to the simulation (namespace: mur) -->
    <include file="$(find mur_description)/launch/upload_mur.launch">
        <arg name="x" default="0.0"/>
        <arg name="y" default="0.0"/>
        <arg name="z" default="-0.15"/>
        <arg name="yaw" default="0"/>
        <arg name="mode" default="5"/>
        <arg name="namespace" default="mur"/>
    </include>

    <!-- Start the sensors-->
    <arg name="uuv_name" value="mur"/>
    <arg name="model_name" value="mur"/>
    <group ns="$(arg uuv_name)">
      <!-- IMU PARSE -->
      <node pkg="mur_control" type="mur_imu_parse.py" name="mur_imu_parse" output="screen"/>
      <!-- BAROMETER PARSE -->
      <node pkg="mur_control" type="mur_barometer_parse.py" name="mur_barometer_parse" output="screen"/>
      <!--node pkg="mur_control" type="mur_control_mixer.py" name="mur_control_mixer" output="screen"></node-->
    </group>


    <!-- Open RViz for visualization of sensor data and visualization markers -->
    <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find mur_control)/rviz/controller_demo.rviz"/>

    <!--
    You can run this demo as

    >> roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch

    and you can then send some waypoints to the vehicle to see it working

    >> roslaunch uuv_control_utils send_waypoints_file.launch uuv_name:=rexrov
    -->
</launch>

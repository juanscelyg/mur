<launch>
    <arg name="debug" default="0"/>

    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>

    <arg name="use_geodetic" default="false"/>
    <arg name="latitude" default="0"/>
    <arg name="longitude" default="0"/>
    <arg name="depth" default="0"/>

    <arg name="latitude_ref" default="0"/>
    <arg name="longitude_ref" default="0"/>
    <arg name="altitude_ref" default="0"/>

    <arg name="mode" default="5"/>
    <arg name="namespace" default="mur"/>
    <arg name="world_frame" default="world"/>

    <rosparam file="$(find mur_description)/config/config.yaml" command="load" />

    <group ns="$(arg namespace)">
        <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(find mur_description)/robots/mur_$(arg mode).urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <group if="$(arg use_geodetic)">
            <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
            args="-urdf -latitude $(arg latitude) -longitude $(arg longitude) -depth $(arg depth) -latitude_ref $(arg latitude_ref) -longitude_ref $(arg longitude_ref) -altitude_ref $(arg altitude_ref) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
        </group>

        <group unless="$(arg use_geodetic)">
            <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
            args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
        </group>

        <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->
        
        <!-- Publish robot model for ROS -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
            <param name="robot_description" value="/$(arg namespace)/robot_description" />
            <param name="publish_frequency" value="5" />
        </node>
    </group>

    <!-- Publish controller for arm-->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="$(arg namespace)" 
        args="arm_base_to_link_joint_position_controller joint_state_controller"/> 


    <!-- publish state and tf for in relation to the world frame -->
    <include file="$(find uuv_descriptions)/launch/message_to_tf.launch">
        <arg name="namespace" value="$(arg namespace)"/>
    </include>

</launch>
